# small script to perform the Collatz Conjecture and graph the output
# done two ways
# with a while loop and recursive function
# mathematics researchers have run 15 quintillion numbers and yet to find an exception
# no proof yet exists for the conjecture

import json
from matplotlib import pyplot


def collatz_recursive(sequence):
    """
    perform the Collatz Conjecture algorithm using a recursive function
    :param sequence: input number to start with
    :return: series generated by Collatx algorithm as string of numbers
    """

    seq_in_str = str(sequence)
    seq_in_list = seq_in_str.split(",")
    curr_num = int(seq_in_list[-1])

    if curr_num % 2 == 0:
        next_num = int(curr_num / 2)
    else:
        next_num = int((curr_num * 3) + 1)

    seq_in_str += "," + str(next_num)

    if next_num == 1:
        return seq_in_str
    else:
        return collatz_recursive(seq_in_str)


def collatz_whileloop(start_num):
    """
    perform the Collatz Conjecture algorithm using a while loop
    :param start_num: input number to start with
    :return: series generated by Collatx algorithm
    """

    collatz_series = list()
    curr_num = start_num

    collatz_series.append(curr_num)
    while curr_num != 1:
        if curr_num % 2 == 0:
            next_num = int(curr_num / 2)
        else:
            next_num = int((curr_num * 3) + 1)
        collatz_series.append(next_num)
        curr_num = next_num

    return collatz_series


if __name__ == "__main__":

    arg = "plot"
    save_file = "collatz_series.json"

    if arg == "run":

        # ##################
        # make a list of numbers to run and store the results
        # ##################
        start_num_list = list(range(2, 1000000))
        results = dict()
        for num in start_num_list:
            # series = collatz_whileloop(num)
            series = collatz_recursive(num)
            print(series)

            results[str(num)] = series

        # save to json
        f = open(save_file, "w")
        json.dump(results, f, indent=4)
        f.close()

    if arg == "plot":
        f = open(save_file)
        series = json.load(f)
        f.close()

        series_lengths = [len(series[key].split(",")) for key in series.keys()]
        fig1 = pyplot.figure()
        ax1 = fig1.add_subplot(111)
        ax1.plot(series_lengths[0:1000])
        ax1.grid()

        data_series = list(range(10, 30))
        fig2 = pyplot.figure()
        ax2 = fig2.add_subplot(111)
        for data_index in data_series:
            data = series[str(data_index)].split(",")
            data = [int(x) for x in data]
            ax2.plot(data)
        ax2.grid()
        pyplot.show()


